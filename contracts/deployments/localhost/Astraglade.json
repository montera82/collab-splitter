{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "openseaProxyRegistry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mintSigner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "jsonPart",
              "type": "string"
            }
          ],
          "internalType": "struct Astraglade.MintingOrder",
          "name": "mintingOrder",
          "type": "tuple"
        }
      ],
      "name": "hashMintingOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isOwnersOpenSeaProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "messageToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "jsonPart",
              "type": "string"
            }
          ],
          "internalType": "struct Astraglade.MintingOrder",
          "name": "mintingOrder",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "mintingSignature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mintSigner_",
          "type": "address"
        }
      ],
      "name": "setMintingSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6893cce519d07afb7cf74c5cbd99150609503ecb5b8c1d8fabd0608f7a431756",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2493248",
    "logsBloom": "0x
    "blockHash": "0x3f49936fe1ece0236bd1bdaedae705c9646ef4bf83f39fb65afe7664fcedc72a",
    "transactionHash": "0x6893cce519d07afb7cf74c5cbd99150609503ecb5b8c1d8fabd0608f7a431756",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x6893cce519d07afb7cf74c5cbd99150609503ecb5b8c1d8fabd0608f7a431756",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3f49936fe1ece0236bd1bdaedae705c9646ef4bf83f39fb65afe7664fcedc72a"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2493248",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Astraglade",
    "ASTG",
    "ipfs://contract",
    "0x0000000000000000000000000000000000000000",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "6d88d4606cbe578a16f6e3129c359fbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"openseaProxyRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintSigner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"jsonPart\",\"type\":\"string\"}],\"internalType\":\"struct Astraglade.MintingOrder\",\"name\":\"mintingOrder\",\"type\":\"tuple\"}],\"name\":\"hashMintingOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOwnersOpenSeaProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"messageToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"jsonPart\",\"type\":\"string\"}],\"internalType\":\"struct Astraglade.MintingOrder\",\"name\":\"mintingOrder\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"mintingSignature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mintSigner_\",\"type\":\"address\"}],\"name\":\"setMintingSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Simon Fremaux (@dievardump)\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}.  The caller must own `tokenId` or be an approved operator.\",\"params\":{\"tokenId\":\"the tokenId to burn\"}},\"constructor\":{\"params\":{\"contractURI_\":\"The contract URI (containing its metadata) - can be empty \\\"\\\"\",\"mintSigner_\":\"Address of the wallet used to sign minting orders\",\"name_\":\"name of the contract (see ERC721)\",\"openseaProxyRegistry_\":\"OpenSea's proxy registry to allow gas-less listings - can be address(0)\",\"owner_\":\"Address to whom transfer ownership (can be address(0), then owner is deployer)\",\"symbol_\":\"symbol of the contract (see ERC721)\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getPrice()\":{\"returns\":{\"_0\":\"the price to mint\"}},\"hashMintingOrder((address,uint256,string))\":{\"params\":{\"mintingOrder\":\"the minting order\"},\"returns\":{\"_0\":\"the hash to sign\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Override isApprovedForAll to check first if current operator is owner's OpenSea proxy\"},\"isOwnersOpenSeaProxy(address,address)\":{\"details\":\"Allows to check if `operator` is owner's OpenSea proxy\",\"params\":{\"operator\":\"the operator (proxy) we check for\",\"owner\":\"the owner we check for\"}},\"mint((address,uint256,string),bytes)\":{\"details\":\"mintingSignature must be a signature that matches `mintSigner` for `mintingOrder`\",\"params\":{\"mintingOrder\":\"the minting order\",\"mintingSignature\":\"signature for the mintingOrder\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_tokenId\":\"- the NFT asset queried for royalty information\",\"_value\":\"- the sale price of the NFT asset specified by _tokenId\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for value sale price\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"needs to be owner\",\"params\":{\"contractURI_\":\"new contract URI\"}},\"setMintingSigner(address)\":{\"details\":\"needs to be owner\",\"params\":{\"mintSigner_\":\"new signer\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"Owner withdraw balance function\"}},\"title\":\"Astraglade\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Allows to burn a tokenId\"},\"constructor\":{\"notice\":\"constructor\"},\"contractURI()\":{\"notice\":\"Returns the contract URI function. Used on OpenSea to get details\"},\"getPrice()\":{\"notice\":\"Helper to get the price\"},\"hashMintingOrder((address,uint256,string))\":{\"notice\":\"Hash the Minting Order so it can be signed by the signer\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Allows gas-less trading on OpenSea by safelisting the Proxy of the user\"},\"isOwnersOpenSeaProxy(address,address)\":{\"notice\":\"Helper for OpenSea gas-less trading\"},\"mint((address,uint256,string),bytes)\":{\"notice\":\"Mint one token using a minting order\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"10% royalties going to this contract\"},\"setContractURI(string)\":{\"notice\":\"Helper for the owner of the contract to set the new contract URI\"},\"setMintingSigner(address)\":{\"notice\":\"Helper for the owner to change current minting signer\"},\"tokenURI(uint256)\":{\"notice\":\"tokenURI override that returns a data:json application\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Astraglade.sol\":\"Astraglade\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Astraglade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport './ERC721Ownable.sol';\\nimport './ERC2981/IERC2981Royalties.sol';\\n\\n/// @title Astraglade\\n/// @author Simon Fremaux (@dievardump)\\ncontract Astraglade is IERC2981Royalties, ERC721Ownable {\\n    using ECDSA for bytes32;\\n    using Strings for uint256;\\n\\n    struct MintingOrder {\\n        address to;\\n        uint256 expiration;\\n        string jsonPart;\\n    }\\n\\n    uint256 public nextTokenId;\\n\\n    address public mintSigner;\\n\\n    uint256 constant MAX_SUPPLY = 11111;\\n\\n    uint256 constant PRICE = 0.0888 ether;\\n\\n    mapping(uint256 => string) internal tokenGeneratedString;\\n    mapping(bytes32 => uint256) public messageToTokenId;\\n\\n    /// @notice constructor\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param openseaProxyRegistry_ OpenSea's proxy registry to allow gas-less listings - can be address(0)\\n    /// @param mintSigner_ Address of the wallet used to sign minting orders\\n    /// @param owner_ Address to whom transfer ownership (can be address(0), then owner is deployer)\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        address openseaProxyRegistry_,\\n        address mintSigner_,\\n        address owner_\\n    )\\n        ERC721Ownable(\\n            name_,\\n            symbol_,\\n            contractURI_,\\n            openseaProxyRegistry_,\\n            owner_\\n        )\\n    {\\n        setMintingSigner(mintSigner_);\\n    }\\n\\n    /// @notice Mint one token using a minting order\\n    /// @dev mintingSignature must be a signature that matches `mintSigner` for `mintingOrder`\\n    /// @param mintingOrder the minting order\\n    /// @param mintingSignature signature for the mintingOrder\\n    function mint(\\n        MintingOrder memory mintingOrder,\\n        bytes memory mintingSignature\\n    ) external payable {\\n        bytes32 message = hashMintingOrder(mintingOrder)\\n        .toEthSignedMessageHash();\\n        require(\\n            message.recover(mintingSignature) == mintSigner,\\n            'Wrong minting order signature.'\\n        );\\n\\n        require(\\n            mintingOrder.expiration >= block.timestamp,\\n            'Minting order expired.'\\n        );\\n\\n        require(\\n            mintingOrder.to == _msgSender(),\\n            'Minting order for another address.'\\n        );\\n\\n        require(messageToTokenId[message] == 0, 'Token already minted.');\\n\\n        uint256 tokenId = nextTokenId + 1;\\n\\n        require(tokenId <= MAX_SUPPLY, 'Max supply already reached.');\\n\\n        require(msg.value == PRICE, 'Incorrect value.');\\n\\n        messageToTokenId[message] = tokenId;\\n\\n        _safeMint(mintingOrder.to, tokenId, '');\\n\\n        tokenGeneratedString[tokenId] = mintingOrder.jsonPart;\\n\\n        nextTokenId = tokenId;\\n    }\\n\\n    /// @inheritdoc\\tERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            ERC721.supportsInterface(interfaceId) ||\\n            interfaceId == type(IERC2981Royalties).interfaceId;\\n    }\\n\\n    /// @notice Helper to get the price\\n    /// @return the price to mint\\n    function getPrice() external pure returns (uint256) {\\n        return PRICE;\\n    }\\n\\n    /// @notice tokenURI override that returns a data:json application\\n    /// @inheritdoc\\tERC721\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        string memory astraType;\\n        if (tokenId <= 10) {\\n            astraType = 'Universa';\\n        } else if (tokenId <= 100) {\\n            astraType = 'Galactica';\\n        } else if (tokenId <= 1000) {\\n            astraType = 'Nebula';\\n        } else if (tokenId <= 3000) {\\n            astraType = 'Meteora';\\n        } else if (tokenId <= 10000) {\\n            astraType = 'Solaris';\\n        } else if (tokenId <= 11110) {\\n            astraType = 'Supernova';\\n        } else {\\n            astraType = 'Quanta';\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;utf8,{\\\"name\\\":\\\"Astraglade - ',\\n                    tokenId.toString(),\\n                    ' - ',\\n                    astraType,\\n                    '\\\",\\\"description\\\":\\\"Astraglade is an interactive, generative, 3D collectible experiment. Astraglades are collected through a unique social collection mechanism. Each version of Astraglade can be signed with a signature which will remain in the artwork forever.\\\",\\\"created_by\\\":\\\"Fabin Rasheed\\\",\\\"twitter\\\":\\\"@astraglade\\\",',\\n                    tokenGeneratedString[tokenId],\\n                    '}'\\n                )\\n            );\\n    }\\n\\n    /// @notice Hash the Minting Order so it can be signed by the signer\\n    /// @param mintingOrder the minting order\\n    /// @return the hash to sign\\n    function hashMintingOrder(MintingOrder memory mintingOrder)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(mintingOrder));\\n    }\\n\\n    /// @notice Helper for the owner to change current minting signer\\n    /// @dev needs to be owner\\n    /// @param mintSigner_ new signer\\n    function setMintingSigner(address mintSigner_) public onlyOwner {\\n        require(mintSigner_ != address(0), 'Signer address required');\\n        mintSigner = mintSigner_;\\n    }\\n\\n    /// @dev Owner withdraw balance function\\n    function withdraw() external onlyOwner {\\n        payable(address(0xb275E5aa8011eA32506a91449B190213224aEc1e)).transfer(\\n            (address(this).balance * 65) / 100\\n        );\\n        payable(address(0xdAC81C3642b520584eD0E743729F238D1c350E62)).transfer(\\n            address(this).balance\\n        );\\n    }\\n\\n    /// @notice 10% royalties going to this contract\\n    /// @inheritdoc\\tIERC2981Royalties\\n    function royaltyInfo(uint256, uint256 value)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        receiver = address(this);\\n        royaltyAmount = (value * 1000) / 10000;\\n    }\\n}\\n\",\"keccak256\":\"0x50393e821b5d558bba58147fa991c19a963f5b1f029125f7a5ea6253318893bb\",\"license\":\"MIT\"},\"contracts/ERC2981/IERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title IERC2981Royalties\\n/// @dev Interface for the ERC2981 - Token Royalty standard\\ninterface IERC2981Royalties {\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\n    /// @return _receiver - address of who should be sent the royalty payment\\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\n        external\\n        view\\n        returns (address _receiver, uint256 _royaltyAmount);\\n}\\n\",\"keccak256\":\"0x7cbdfb8ed5e1c6925ff27ab652fef5150fc3ed1ed29641ecc6f7e37824fd0c27\",\"license\":\"MIT\"},\"contracts/ERC721Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\n\\nimport './OpenSea/BaseOpenSea.sol';\\n\\n/// @title ERC721Ownable\\n/// @author Simon Fremaux (@dievardump)\\ncontract ERC721Ownable is Ownable, ERC721, BaseOpenSea {\\n    /// @notice constructor\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param openseaProxyRegistry_ OpenSea's proxy registry to allow gas-less listings - can be address(0)\\n    /// @param owner_ Address to whom transfer ownership (can be address(0), then owner is deployer)\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        address openseaProxyRegistry_,\\n        address owner_\\n    ) ERC721(name_, symbol_) {\\n        // set contract uri if present\\n        if (bytes(contractURI_).length > 0) {\\n            _setContractURI(contractURI_);\\n        }\\n\\n        // set OpenSea proxyRegistry for gas-less trading if present\\n        if (address(0) != openseaProxyRegistry_) {\\n            _setOpenSeaRegistry(openseaProxyRegistry_);\\n        }\\n\\n        // transferOwnership if needed\\n        if (address(0) != owner_) {\\n            transferOwnership(owner_);\\n        }\\n    }\\n\\n    /// @notice Allows to burn a tokenId\\n    /// @dev Burns `tokenId`. See {ERC721-_burn}.  The caller must own `tokenId` or be an approved operator.\\n    /// @param tokenId the tokenId to burn\\n    function burn(uint256 tokenId) public virtual {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            'ERC721Burnable: caller is not owner nor approved'\\n        );\\n        _burn(tokenId);\\n    }\\n\\n    /// @notice Allows gas-less trading on OpenSea by safelisting the Proxy of the user\\n    /// @dev Override isApprovedForAll to check first if current operator is owner's OpenSea proxy\\n    /// @inheritdoc\\tERC721\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        // allows gas less trading on OpenSea\\n        if (isOwnersOpenSeaProxy(owner, operator)) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    /// @notice Helper for the owner of the contract to set the new contract URI\\n    /// @dev needs to be owner\\n    /// @param contractURI_ new contract URI\\n    function setContractURI(string memory contractURI_) external onlyOwner {\\n        _setContractURI(contractURI_);\\n    }\\n}\\n\",\"keccak256\":\"0xdc8a2efc01456d0645da4875b5e78575fb2ed87e678910c71df38c2e9870a71b\",\"license\":\"MIT\"},\"contracts/OpenSea/BaseOpenSea.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title OpenSea contract helper that defines a few things\\n/// @author Simon Fremaux (@dievardump)\\n/// @dev This is a contract used to add OpenSea's support\\ncontract BaseOpenSea {\\n    string private _contractURI;\\n    ProxyRegistry private _proxyRegistry;\\n\\n    /// @notice Returns the contract URI function. Used on OpenSea to get details\\n    //          about a contract (owner, royalties etc...)\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    /// @notice Helper for OpenSea gas-less trading\\n    /// @dev Allows to check if `operator` is owner's OpenSea proxy\\n    /// @param owner the owner we check for\\n    /// @param operator the operator (proxy) we check for\\n    function isOwnersOpenSeaProxy(address owner, address operator)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        ProxyRegistry proxyRegistry = _proxyRegistry;\\n        return\\n            // we have a proxy registry address\\n            address(proxyRegistry) != address(0) &&\\n            // current operator is owner's proxy address\\n            address(proxyRegistry.proxies(owner)) == operator;\\n    }\\n\\n    /// @dev Internal function to set the _contractURI\\n    /// @param contractURI_ the new contract uri\\n    function _setContractURI(string memory contractURI_) internal {\\n        _contractURI = contractURI_;\\n    }\\n\\n    /// @dev Internal function to set the _proxyRegistry\\n    /// @param proxyRegistryAddress the new proxy registry address\\n    function _setOpenSeaRegistry(address proxyRegistryAddress) internal {\\n        _proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n    }\\n}\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\",\"keccak256\":\"0x875b17c55d33fbb6b40cef66edf6fe9fcba9b47c468e4b09169ffac7322d3196\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002f7e38038062002f7e83398101604081905262000034916200040c565b858585858484846200004f62000049620000e9565b620000ed565b8151620000649060019060208501906200029e565b5080516200007a9060029060208401906200029e565b50508351159050620000915762000091836200013d565b6001600160a01b03821615620000ac57620000ac8262000156565b6001600160a01b03811615620000c757620000c78162000178565b5050505050620000dd82620001fe60201b60201c565b505050505050620005d5565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051620001529060079060208401906200029e565b5050565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b62000182620000e9565b6001600160a01b0316620001956200028f565b6001600160a01b031614620001c75760405162461bcd60e51b8152600401620001be9062000516565b60405180910390fd5b6001600160a01b038116620001f05760405162461bcd60e51b8152600401620001be90620004d0565b620001fb81620000ed565b50565b62000208620000e9565b6001600160a01b03166200021b6200028f565b6001600160a01b031614620002445760405162461bcd60e51b8152600401620001be9062000516565b6001600160a01b0381166200026d5760405162461bcd60e51b8152600401620001be906200054b565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b828054620002ac9062000582565b90600052602060002090601f016020900481019282620002d057600085556200031b565b82601f10620002eb57805160ff19168380011785556200031b565b828001600101855582156200031b579182015b828111156200031b578251825591602001919060010190620002fe565b50620003299291506200032d565b5090565b5b808211156200032957600081556001016200032e565b80516001600160a01b03811681146200035c57600080fd5b919050565b600082601f83011262000372578081fd5b81516001600160401b03808211156200038f576200038f620005bf565b6040516020601f8401601f1916820181018381118382101715620003b757620003b7620005bf565b6040528382528584018101871015620003ce578485fd5b8492505b83831015620003f15785830181015182840182015291820191620003d2565b838311156200040257848185840101525b5095945050505050565b60008060008060008060c0878903121562000425578182fd5b86516001600160401b03808211156200043c578384fd5b6200044a8a838b0162000361565b9750602089015191508082111562000460578384fd5b6200046e8a838b0162000361565b9650604089015191508082111562000484578384fd5b506200049389828a0162000361565b945050620004a46060880162000344565b9250620004b46080880162000344565b9150620004c460a0880162000344565b90509295509295509295565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526017908201527f5369676e65722061646472657373207265717569726564000000000000000000604082015260600190565b6002810460018216806200059757607f821691505b60208210811415620005b957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61299980620005e56000396000f3fe6080604052600436106101c25760003560e01c8063715018a6116100f7578063a5f6029011610095578063e8a3d48511610064578063e8a3d485146104da578063e985e9c5146104ef578063f17af48d1461050f578063f2fde38b14610524576101c2565b8063a5f602901461045a578063b88d4fde1461047a578063c87b56dd1461049a578063c97f31bb146104ba576101c2565b8063938e3d7b116100d1578063938e3d7b146103f057806395d89b411461041057806398d5fdca14610425578063a22cb4651461043a576101c2565b8063715018a6146103b157806375794a3c146103c65780638da5cb5b146103db576101c2565b80633ccfd60b116101645780636102de981161013e5780636102de98146103245780636352211e1461034457806367e341cf1461036457806370a0823114610391576101c2565b80633ccfd60b146102cf57806342842e0e146102e457806342966c6814610304576101c2565b8063095ea7b3116101a0578063095ea7b31461024c57806323b872dd1461026e5780632736bf131461028e5780632a55205a146102a1576101c2565b806301ffc9a7146101c757806306fdde03146101fd578063081812fc1461021f575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611c00565b610544565b6040516101f491906120ad565b60405180910390f35b34801561020957600080fd5b50610212610572565b6040516101f491906120df565b34801561022b57600080fd5b5061023f61023a366004611be8565b610604565b6040516101f4919061204d565b34801561025857600080fd5b5061026c610267366004611bbd565b610650565b005b34801561027a57600080fd5b5061026c610289366004611ae2565b6106e8565b61026c61029c366004611cba565b610720565b3480156102ad57600080fd5b506102c16102bc366004611d1b565b6108b7565b6040516101f4929190612094565b3480156102db57600080fd5b5061026c6108dc565b3480156102f057600080fd5b5061026c6102ff366004611ae2565b6109b6565b34801561031057600080fd5b5061026c61031f366004611be8565b6109d1565b34801561033057600080fd5b506101e761033f366004611aaa565b610a01565b34801561035057600080fd5b5061023f61035f366004611be8565b610ab5565b34801561037057600080fd5b5061038461037f366004611c87565b610aea565b6040516101f491906120b8565b34801561039d57600080fd5b506103846103ac366004611a8e565b610b1a565b3480156103bd57600080fd5b5061026c610b5e565b3480156103d257600080fd5b50610384610ba9565b3480156103e757600080fd5b5061023f610baf565b3480156103fc57600080fd5b5061026c61040b366004611c54565b610bbe565b34801561041c57600080fd5b50610212610c06565b34801561043157600080fd5b50610384610c15565b34801561044657600080fd5b5061026c610455366004611b8c565b610c21565b34801561046657600080fd5b5061026c610475366004611a8e565b610cef565b34801561048657600080fd5b5061026c610495366004611b22565b610d76565b3480156104a657600080fd5b506102126104b5366004611be8565b610db5565b3480156104c657600080fd5b506103846104d5366004611be8565b610f2d565b3480156104e657600080fd5b50610212610f3f565b3480156104fb57600080fd5b506101e761050a366004611aaa565b610f4e565b34801561051b57600080fd5b5061023f610f78565b34801561053057600080fd5b5061026c61053f366004611a8e565b610f87565b600061054f82610ff5565b8061056a57506001600160e01b0319821663152a902d60e11b145b90505b919050565b6060600180546105819061288c565b80601f01602080910402602001604051908101604052809291908181526020018280546105ad9061288c565b80156105fa5780601f106105cf576101008083540402835291602001916105fa565b820191906000526020600020905b8154815290600101906020018083116105dd57829003601f168201915b5050505050905090565b600061060f82611035565b6106345760405162461bcd60e51b815260040161062b90612577565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061065b82610ab5565b9050806001600160a01b0316836001600160a01b0316141561068f5760405162461bcd60e51b815260040161062b9061266b565b806001600160a01b03166106a1611052565b6001600160a01b031614806106bd57506106bd8161050a611052565b6106d95760405162461bcd60e51b815260040161062b906123d9565b6106e38383611056565b505050565b6106f96106f3611052565b826110c4565b6107155760405162461bcd60e51b815260040161062b906126e3565b6106e3838383611141565b600061073361072e84610aea565b61126e565b600a549091506001600160a01b031661074c8284611281565b6001600160a01b0316146107725760405162461bcd60e51b815260040161062b90612734565b42836020015110156107965760405162461bcd60e51b815260040161062b90612367565b61079e611052565b6001600160a01b031683600001516001600160a01b0316146107d25760405162461bcd60e51b815260040161062b90612397565b6000818152600c6020526040902054156107fe5760405162461bcd60e51b815260040161062b90612160565b6000600954600161080f91906127fe565b9050612b678111156108335760405162461bcd60e51b815260040161062b90612540565b67013b7b21280e0000341461085a5760405162461bcd60e51b815260040161062b906125c3565b6000828152600c6020908152604080832084905586518151928301909152918152610887919083906112f5565b6040808501516000838152600b602090815292902081516108ae93919291909101906118f0565b50600955505050565b3060006127106108c9846103e861282a565b6108d39190612816565b90509250929050565b6108e4611052565b6001600160a01b03166108f5610baf565b6001600160a01b03161461091b5760405162461bcd60e51b815260040161062b906125ed565b73b275e5aa8011ea32506a91449b190213224aec1e6108fc606461094047604161282a565b61094a9190612816565b6040518115909202916000818181858888f19350505050158015610972573d6000803e3d6000fd5b5060405173dac81c3642b520584ed0e743729f238d1c350e62904780156108fc02916000818181858888f193505050501580156109b3573d6000803e3d6000fd5b50565b6106e383838360405180602001604052806000815250610d76565b6109dc6106f3611052565b6109f85760405162461bcd60e51b815260040161062b9061276b565b6109b381611328565b6008546000906001600160a01b03168015801590610aab5750826001600160a01b0316816001600160a01b031663c4552791866040518263ffffffff1660e01b8152600401610a50919061204d565b60206040518083038186803b158015610a6857600080fd5b505afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190611c38565b6001600160a01b0316145b9150505b92915050565b6000818152600360205260408120546001600160a01b03168061056a5760405162461bcd60e51b815260040161062b90612480565b600081604051602001610afd91906127bb565b604051602081830303815290604052805190602001209050919050565b60006001600160a01b038216610b425760405162461bcd60e51b815260040161062b90612436565b506001600160a01b031660009081526004602052604090205490565b610b66611052565b6001600160a01b0316610b77610baf565b6001600160a01b031614610b9d5760405162461bcd60e51b815260040161062b906125ed565b610ba760006113cf565b565b60095481565b6000546001600160a01b031690565b610bc6611052565b6001600160a01b0316610bd7610baf565b6001600160a01b031614610bfd5760405162461bcd60e51b815260040161062b906125ed565b6109b38161141f565b6060600280546105819061288c565b67013b7b21280e000090565b610c29611052565b6001600160a01b0316826001600160a01b03161415610c5a5760405162461bcd60e51b815260040161062b906122a2565b8060066000610c67611052565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610cab611052565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ce391906120ad565b60405180910390a35050565b610cf7611052565b6001600160a01b0316610d08610baf565b6001600160a01b031614610d2e5760405162461bcd60e51b815260040161062b906125ed565b6001600160a01b038116610d545760405162461bcd60e51b815260040161062b906126ac565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b610d87610d81611052565b836110c4565b610da35760405162461bcd60e51b815260040161062b906126e3565b610daf84848484611436565b50505050565b606080600a8311610de55750604080518082019091526008815267556e69766572736160c01b6020820152610ee7565b60648311610e13575060408051808201909152600981526847616c61637469636160b81b6020820152610ee7565b6103e88311610e3f57506040805180820190915260068152654e6562756c6160d01b6020820152610ee7565b610bb88311610e6c57506040805180820190915260078152664d6574656f726160c81b6020820152610ee7565b6127108311610e995750604080518082019091526007815266536f6c6172697360c81b6020820152610ee7565b612b668311610ec8575060408051808201909152600981526853757065726e6f766160b81b6020820152610ee7565b506040805180820190915260068152655175616e746160d01b60208201525b610ef083611469565b81600b6000868152602001908152602001600020604051602001610f1693929190611e3e565b604051602081830303815290604052915050919050565b600c6020526000908152604090205481565b6060600780546105819061288c565b6000610f5a8383610a01565b15610f6757506001610aaf565b610f71838361158c565b9392505050565b600a546001600160a01b031681565b610f8f611052565b6001600160a01b0316610fa0610baf565b6001600160a01b031614610fc65760405162461bcd60e51b815260040161062b906125ed565b6001600160a01b038116610fec5760405162461bcd60e51b815260040161062b906121e1565b6109b3816113cf565b60006001600160e01b031982166380ac58cd60e01b148061102657506001600160e01b03198216635b5e139f60e01b145b8061056a575061056a826115ba565b6000908152600360205260409020546001600160a01b0316151590565b3390565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061108b82610ab5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110cf82611035565b6110eb5760405162461bcd60e51b815260040161062b9061231b565b60006110f683610ab5565b9050806001600160a01b0316846001600160a01b031614806111315750836001600160a01b031661112684610604565b6001600160a01b0316145b80610aab5750610aab8185610f4e565b826001600160a01b031661115482610ab5565b6001600160a01b03161461117a5760405162461bcd60e51b815260040161062b90612622565b6001600160a01b0382166111a05760405162461bcd60e51b815260040161062b9061225e565b6111ab8383836106e3565b6111b6600082611056565b6001600160a01b03831660009081526004602052604081208054600192906111df908490612849565b90915550506001600160a01b038216600090815260046020526040812080546001929061120d9084906127fe565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600081604051602001610afd9190611e0d565b60008151604114156112b55760208201516040830151606084015160001a6112ab868285856115d3565b9350505050610aaf565b8151604014156112dd57602082015160408301516112d48583836116c9565b92505050610aaf565b60405162461bcd60e51b815260040161062b90612129565b6112ff83836116f3565b61130c60008484846117d2565b6106e35760405162461bcd60e51b815260040161062b9061218f565b600061133382610ab5565b9050611341816000846106e3565b61134c600083611056565b6001600160a01b0381166000908152600460205260408120805460019290611375908490612849565b909155505060008281526003602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516114329060079060208401906118f0565b5050565b611441848484611141565b61144d848484846117d2565b610daf5760405162461bcd60e51b815260040161062b9061218f565b60608161148e57506040805180820190915260018152600360fc1b602082015261056d565b8160005b81156114b857806114a2816128c7565b91506114b19050600a83612816565b9150611492565b60008167ffffffffffffffff8111156114e157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561150b576020820181803683370190505b5090505b841561158457611520600183612849565b915061152d600a866128e2565b6115389060306127fe565b60f81b81838151811061155b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061157d600a86612816565b945061150f565b949350505050565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6001600160e01b031981166301ffc9a760e01b14919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156116155760405162461bcd60e51b815260040161062b906122d9565b8360ff16601b148061162a57508360ff16601c145b6116465760405162461bcd60e51b815260040161062b906124c9565b60006001868686866040516000815260200160405260405161166b94939291906120c1565b6020604051602081039080840390855afa15801561168d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116c05760405162461bcd60e51b815260040161062b906120f2565b95945050505050565b60006001600160ff1b03821660ff83901c601b016116e9868287856115d3565b9695505050505050565b6001600160a01b0382166117195760405162461bcd60e51b815260040161062b9061250b565b61172281611035565b1561173f5760405162461bcd60e51b815260040161062b90612227565b61174b600083836106e3565b6001600160a01b03821660009081526004602052604081208054600192906117749084906127fe565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006117e6846001600160a01b03166118ea565b156118e257836001600160a01b031663150b7a02611802611052565b8786866040518563ffffffff1660e01b81526004016118249493929190612061565b602060405180830381600087803b15801561183e57600080fd5b505af192505050801561186e575060408051601f3d908101601f1916820190925261186b91810190611c1c565b60015b6118c8573d80801561189c576040519150601f19603f3d011682016040523d82523d6000602084013e6118a1565b606091505b5080516118c05760405162461bcd60e51b815260040161062b9061218f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611584565b506001611584565b3b151590565b8280546118fc9061288c565b90600052602060002090601f01602090048101928261191e5760008555611964565b82601f1061193757805160ff1916838001178555611964565b82800160010185558215611964579182015b82811115611964578251825591602001919060010190611949565b50611970929150611974565b5090565b5b808211156119705760008155600101611975565b600082601f830112611999578081fd5b813567ffffffffffffffff808211156119b4576119b4612922565b604051601f8301601f1916810160200182811182821017156119d8576119d8612922565b6040528281528483016020018610156119ef578384fd5b82602086016020830137918201602001929092529392505050565b600060608284031215611a1b578081fd5b6040516060810167ffffffffffffffff8282108183111715611a3f57611a3f612922565b8160405282935084359150611a5382612938565b818352602085013560208401526040850135915080821115611a7457600080fd5b50611a8185828601611989565b6040830152505092915050565b600060208284031215611a9f578081fd5b8135610f7181612938565b60008060408385031215611abc578081fd5b8235611ac781612938565b91506020830135611ad781612938565b809150509250929050565b600080600060608486031215611af6578081fd5b8335611b0181612938565b92506020840135611b1181612938565b929592945050506040919091013590565b60008060008060808587031215611b37578081fd5b8435611b4281612938565b93506020850135611b5281612938565b925060408501359150606085013567ffffffffffffffff811115611b74578182fd5b611b8087828801611989565b91505092959194509250565b60008060408385031215611b9e578182fd5b8235611ba981612938565b915060208301358015158114611ad7578182fd5b60008060408385031215611bcf578182fd5b8235611bda81612938565b946020939093013593505050565b600060208284031215611bf9578081fd5b5035919050565b600060208284031215611c11578081fd5b8135610f718161294d565b600060208284031215611c2d578081fd5b8151610f718161294d565b600060208284031215611c49578081fd5b8151610f7181612938565b600060208284031215611c65578081fd5b813567ffffffffffffffff811115611c7b578182fd5b610aab84828501611989565b600060208284031215611c98578081fd5b813567ffffffffffffffff811115611cae578182fd5b610aab84828501611a0a565b60008060408385031215611ccc578081fd5b823567ffffffffffffffff80821115611ce3578283fd5b611cef86838701611a0a565b93506020850135915080821115611d04578283fd5b50611d1185828601611989565b9150509250929050565b60008060408385031215611d2d578182fd5b50508035926020909101359150565b60008151808452611d54816020860160208601612860565b601f01601f19169290920160200192915050565b805460009060028104600180831680611d8257607f831692505b6020808410821415611da257634e487b7160e01b86526022600452602486fd5b818015611db65760018114611dc757611df4565b60ff19861689528489019650611df4565b611dd0886127f2565b60005b86811015611dec5781548b820152908501908301611dd3565b505084890196505b50505050505092915050565b607d60f81b815260010190565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b757466382c7b226e616d825270032911d1120b9ba3930b3b630b23290169607d1b60208301528451611e90816031850160208901612860565b6201016960ed1b6031918401918201528451611eb3816034840160208901612860565b7f222c226465736372697074696f6e223a224173747261676c6164652069732061603492909101918201527f6e20696e7465726163746976652c2067656e657261746976652c20334420636f60548201527f6c6c65637469626c65206578706572696d656e742e204173747261676c61646560748201527f732061726520636f6c6c6563746564207468726f756768206120756e6971756560948201527f20736f6369616c20636f6c6c656374696f6e206d656368616e69736d2e20456160b48201527f63682076657273696f6e206f66204173747261676c6164652063616e2062652060d48201527f7369676e656420776974682061207369676e617475726520776869636820776960f48201527f6c6c2072656d61696e20696e2074686520617274776f726b20666f72657665726101148201527f2e222c22637265617465645f6279223a22466162696e2052617368656564222c6101348201527f2274776974746572223a22406173747261676c616465222c00000000000000006101548201526116e961204861016c830186611d68565b611e00565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906116e990830184611d3c565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610f716020830184611d3c565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b6020808252601590820152742a37b5b2b71030b63932b0b23c9036b4b73a32b21760591b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526016908201527526b4b73a34b7339037b93232b91032bc3834b932b21760511b604082015260600190565b60208082526022908201527f4d696e74696e67206f7264657220666f7220616e6f7468657220616464726573604082015261399760f11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252601b908201527f4d617820737570706c7920616c726561647920726561636865642e0000000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526010908201526f24b731b7b93932b1ba103b30b63ab29760811b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526017908201527f5369676e65722061646472657373207265717569726564000000000000000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601e908201527f57726f6e67206d696e74696e67206f72646572207369676e61747572652e0000604082015260600190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201526f1b995c881b9bdc88185c1c1c9bdd995960821b606082015260800190565b60006020825260018060a01b038351166020830152602083015160408301526040830151606080840152610aab6080840182611d3c565b60009081526020902090565b60008219821115612811576128116128f6565b500190565b6000826128255761282561290c565b500490565b6000816000190483118215151615612844576128446128f6565b500290565b60008282101561285b5761285b6128f6565b500390565b60005b8381101561287b578181015183820152602001612863565b83811115610daf5750506000910152565b6002810460018216806128a057607f821691505b602082108114156128c157634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156128db576128db6128f6565b5060010190565b6000826128f1576128f161290c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109b357600080fd5b6001600160e01b0319811681146109b357600080fdfea26469706673582212209542df84f4abad4ca5235efc45c4fe1002d019d7605a2feec459fb8fd96bad5464736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c8063715018a6116100f7578063a5f6029011610095578063e8a3d48511610064578063e8a3d485146104da578063e985e9c5146104ef578063f17af48d1461050f578063f2fde38b14610524576101c2565b8063a5f602901461045a578063b88d4fde1461047a578063c87b56dd1461049a578063c97f31bb146104ba576101c2565b8063938e3d7b116100d1578063938e3d7b146103f057806395d89b411461041057806398d5fdca14610425578063a22cb4651461043a576101c2565b8063715018a6146103b157806375794a3c146103c65780638da5cb5b146103db576101c2565b80633ccfd60b116101645780636102de981161013e5780636102de98146103245780636352211e1461034457806367e341cf1461036457806370a0823114610391576101c2565b80633ccfd60b146102cf57806342842e0e146102e457806342966c6814610304576101c2565b8063095ea7b3116101a0578063095ea7b31461024c57806323b872dd1461026e5780632736bf131461028e5780632a55205a146102a1576101c2565b806301ffc9a7146101c757806306fdde03146101fd578063081812fc1461021f575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611c00565b610544565b6040516101f491906120ad565b60405180910390f35b34801561020957600080fd5b50610212610572565b6040516101f491906120df565b34801561022b57600080fd5b5061023f61023a366004611be8565b610604565b6040516101f4919061204d565b34801561025857600080fd5b5061026c610267366004611bbd565b610650565b005b34801561027a57600080fd5b5061026c610289366004611ae2565b6106e8565b61026c61029c366004611cba565b610720565b3480156102ad57600080fd5b506102c16102bc366004611d1b565b6108b7565b6040516101f4929190612094565b3480156102db57600080fd5b5061026c6108dc565b3480156102f057600080fd5b5061026c6102ff366004611ae2565b6109b6565b34801561031057600080fd5b5061026c61031f366004611be8565b6109d1565b34801561033057600080fd5b506101e761033f366004611aaa565b610a01565b34801561035057600080fd5b5061023f61035f366004611be8565b610ab5565b34801561037057600080fd5b5061038461037f366004611c87565b610aea565b6040516101f491906120b8565b34801561039d57600080fd5b506103846103ac366004611a8e565b610b1a565b3480156103bd57600080fd5b5061026c610b5e565b3480156103d257600080fd5b50610384610ba9565b3480156103e757600080fd5b5061023f610baf565b3480156103fc57600080fd5b5061026c61040b366004611c54565b610bbe565b34801561041c57600080fd5b50610212610c06565b34801561043157600080fd5b50610384610c15565b34801561044657600080fd5b5061026c610455366004611b8c565b610c21565b34801561046657600080fd5b5061026c610475366004611a8e565b610cef565b34801561048657600080fd5b5061026c610495366004611b22565b610d76565b3480156104a657600080fd5b506102126104b5366004611be8565b610db5565b3480156104c657600080fd5b506103846104d5366004611be8565b610f2d565b3480156104e657600080fd5b50610212610f3f565b3480156104fb57600080fd5b506101e761050a366004611aaa565b610f4e565b34801561051b57600080fd5b5061023f610f78565b34801561053057600080fd5b5061026c61053f366004611a8e565b610f87565b600061054f82610ff5565b8061056a57506001600160e01b0319821663152a902d60e11b145b90505b919050565b6060600180546105819061288c565b80601f01602080910402602001604051908101604052809291908181526020018280546105ad9061288c565b80156105fa5780601f106105cf576101008083540402835291602001916105fa565b820191906000526020600020905b8154815290600101906020018083116105dd57829003601f168201915b5050505050905090565b600061060f82611035565b6106345760405162461bcd60e51b815260040161062b90612577565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061065b82610ab5565b9050806001600160a01b0316836001600160a01b0316141561068f5760405162461bcd60e51b815260040161062b9061266b565b806001600160a01b03166106a1611052565b6001600160a01b031614806106bd57506106bd8161050a611052565b6106d95760405162461bcd60e51b815260040161062b906123d9565b6106e38383611056565b505050565b6106f96106f3611052565b826110c4565b6107155760405162461bcd60e51b815260040161062b906126e3565b6106e3838383611141565b600061073361072e84610aea565b61126e565b600a549091506001600160a01b031661074c8284611281565b6001600160a01b0316146107725760405162461bcd60e51b815260040161062b90612734565b42836020015110156107965760405162461bcd60e51b815260040161062b90612367565b61079e611052565b6001600160a01b031683600001516001600160a01b0316146107d25760405162461bcd60e51b815260040161062b90612397565b6000818152600c6020526040902054156107fe5760405162461bcd60e51b815260040161062b90612160565b6000600954600161080f91906127fe565b9050612b678111156108335760405162461bcd60e51b815260040161062b90612540565b67013b7b21280e0000341461085a5760405162461bcd60e51b815260040161062b906125c3565b6000828152600c6020908152604080832084905586518151928301909152918152610887919083906112f5565b6040808501516000838152600b602090815292902081516108ae93919291909101906118f0565b50600955505050565b3060006127106108c9846103e861282a565b6108d39190612816565b90509250929050565b6108e4611052565b6001600160a01b03166108f5610baf565b6001600160a01b03161461091b5760405162461bcd60e51b815260040161062b906125ed565b73b275e5aa8011ea32506a91449b190213224aec1e6108fc606461094047604161282a565b61094a9190612816565b6040518115909202916000818181858888f19350505050158015610972573d6000803e3d6000fd5b5060405173dac81c3642b520584ed0e743729f238d1c350e62904780156108fc02916000818181858888f193505050501580156109b3573d6000803e3d6000fd5b50565b6106e383838360405180602001604052806000815250610d76565b6109dc6106f3611052565b6109f85760405162461bcd60e51b815260040161062b9061276b565b6109b381611328565b6008546000906001600160a01b03168015801590610aab5750826001600160a01b0316816001600160a01b031663c4552791866040518263ffffffff1660e01b8152600401610a50919061204d565b60206040518083038186803b158015610a6857600080fd5b505afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190611c38565b6001600160a01b0316145b9150505b92915050565b6000818152600360205260408120546001600160a01b03168061056a5760405162461bcd60e51b815260040161062b90612480565b600081604051602001610afd91906127bb565b604051602081830303815290604052805190602001209050919050565b60006001600160a01b038216610b425760405162461bcd60e51b815260040161062b90612436565b506001600160a01b031660009081526004602052604090205490565b610b66611052565b6001600160a01b0316610b77610baf565b6001600160a01b031614610b9d5760405162461bcd60e51b815260040161062b906125ed565b610ba760006113cf565b565b60095481565b6000546001600160a01b031690565b610bc6611052565b6001600160a01b0316610bd7610baf565b6001600160a01b031614610bfd5760405162461bcd60e51b815260040161062b906125ed565b6109b38161141f565b6060600280546105819061288c565b67013b7b21280e000090565b610c29611052565b6001600160a01b0316826001600160a01b03161415610c5a5760405162461bcd60e51b815260040161062b906122a2565b8060066000610c67611052565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610cab611052565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ce391906120ad565b60405180910390a35050565b610cf7611052565b6001600160a01b0316610d08610baf565b6001600160a01b031614610d2e5760405162461bcd60e51b815260040161062b906125ed565b6001600160a01b038116610d545760405162461bcd60e51b815260040161062b906126ac565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b610d87610d81611052565b836110c4565b610da35760405162461bcd60e51b815260040161062b906126e3565b610daf84848484611436565b50505050565b606080600a8311610de55750604080518082019091526008815267556e69766572736160c01b6020820152610ee7565b60648311610e13575060408051808201909152600981526847616c61637469636160b81b6020820152610ee7565b6103e88311610e3f57506040805180820190915260068152654e6562756c6160d01b6020820152610ee7565b610bb88311610e6c57506040805180820190915260078152664d6574656f726160c81b6020820152610ee7565b6127108311610e995750604080518082019091526007815266536f6c6172697360c81b6020820152610ee7565b612b668311610ec8575060408051808201909152600981526853757065726e6f766160b81b6020820152610ee7565b506040805180820190915260068152655175616e746160d01b60208201525b610ef083611469565b81600b6000868152602001908152602001600020604051602001610f1693929190611e3e565b604051602081830303815290604052915050919050565b600c6020526000908152604090205481565b6060600780546105819061288c565b6000610f5a8383610a01565b15610f6757506001610aaf565b610f71838361158c565b9392505050565b600a546001600160a01b031681565b610f8f611052565b6001600160a01b0316610fa0610baf565b6001600160a01b031614610fc65760405162461bcd60e51b815260040161062b906125ed565b6001600160a01b038116610fec5760405162461bcd60e51b815260040161062b906121e1565b6109b3816113cf565b60006001600160e01b031982166380ac58cd60e01b148061102657506001600160e01b03198216635b5e139f60e01b145b8061056a575061056a826115ba565b6000908152600360205260409020546001600160a01b0316151590565b3390565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061108b82610ab5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110cf82611035565b6110eb5760405162461bcd60e51b815260040161062b9061231b565b60006110f683610ab5565b9050806001600160a01b0316846001600160a01b031614806111315750836001600160a01b031661112684610604565b6001600160a01b0316145b80610aab5750610aab8185610f4e565b826001600160a01b031661115482610ab5565b6001600160a01b03161461117a5760405162461bcd60e51b815260040161062b90612622565b6001600160a01b0382166111a05760405162461bcd60e51b815260040161062b9061225e565b6111ab8383836106e3565b6111b6600082611056565b6001600160a01b03831660009081526004602052604081208054600192906111df908490612849565b90915550506001600160a01b038216600090815260046020526040812080546001929061120d9084906127fe565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600081604051602001610afd9190611e0d565b60008151604114156112b55760208201516040830151606084015160001a6112ab868285856115d3565b9350505050610aaf565b8151604014156112dd57602082015160408301516112d48583836116c9565b92505050610aaf565b60405162461bcd60e51b815260040161062b90612129565b6112ff83836116f3565b61130c60008484846117d2565b6106e35760405162461bcd60e51b815260040161062b9061218f565b600061133382610ab5565b9050611341816000846106e3565b61134c600083611056565b6001600160a01b0381166000908152600460205260408120805460019290611375908490612849565b909155505060008281526003602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516114329060079060208401906118f0565b5050565b611441848484611141565b61144d848484846117d2565b610daf5760405162461bcd60e51b815260040161062b9061218f565b60608161148e57506040805180820190915260018152600360fc1b602082015261056d565b8160005b81156114b857806114a2816128c7565b91506114b19050600a83612816565b9150611492565b60008167ffffffffffffffff8111156114e157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561150b576020820181803683370190505b5090505b841561158457611520600183612849565b915061152d600a866128e2565b6115389060306127fe565b60f81b81838151811061155b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061157d600a86612816565b945061150f565b949350505050565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6001600160e01b031981166301ffc9a760e01b14919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156116155760405162461bcd60e51b815260040161062b906122d9565b8360ff16601b148061162a57508360ff16601c145b6116465760405162461bcd60e51b815260040161062b906124c9565b60006001868686866040516000815260200160405260405161166b94939291906120c1565b6020604051602081039080840390855afa15801561168d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116c05760405162461bcd60e51b815260040161062b906120f2565b95945050505050565b60006001600160ff1b03821660ff83901c601b016116e9868287856115d3565b9695505050505050565b6001600160a01b0382166117195760405162461bcd60e51b815260040161062b9061250b565b61172281611035565b1561173f5760405162461bcd60e51b815260040161062b90612227565b61174b600083836106e3565b6001600160a01b03821660009081526004602052604081208054600192906117749084906127fe565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006117e6846001600160a01b03166118ea565b156118e257836001600160a01b031663150b7a02611802611052565b8786866040518563ffffffff1660e01b81526004016118249493929190612061565b602060405180830381600087803b15801561183e57600080fd5b505af192505050801561186e575060408051601f3d908101601f1916820190925261186b91810190611c1c565b60015b6118c8573d80801561189c576040519150601f19603f3d011682016040523d82523d6000602084013e6118a1565b606091505b5080516118c05760405162461bcd60e51b815260040161062b9061218f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611584565b506001611584565b3b151590565b8280546118fc9061288c565b90600052602060002090601f01602090048101928261191e5760008555611964565b82601f1061193757805160ff1916838001178555611964565b82800160010185558215611964579182015b82811115611964578251825591602001919060010190611949565b50611970929150611974565b5090565b5b808211156119705760008155600101611975565b600082601f830112611999578081fd5b813567ffffffffffffffff808211156119b4576119b4612922565b604051601f8301601f1916810160200182811182821017156119d8576119d8612922565b6040528281528483016020018610156119ef578384fd5b82602086016020830137918201602001929092529392505050565b600060608284031215611a1b578081fd5b6040516060810167ffffffffffffffff8282108183111715611a3f57611a3f612922565b8160405282935084359150611a5382612938565b818352602085013560208401526040850135915080821115611a7457600080fd5b50611a8185828601611989565b6040830152505092915050565b600060208284031215611a9f578081fd5b8135610f7181612938565b60008060408385031215611abc578081fd5b8235611ac781612938565b91506020830135611ad781612938565b809150509250929050565b600080600060608486031215611af6578081fd5b8335611b0181612938565b92506020840135611b1181612938565b929592945050506040919091013590565b60008060008060808587031215611b37578081fd5b8435611b4281612938565b93506020850135611b5281612938565b925060408501359150606085013567ffffffffffffffff811115611b74578182fd5b611b8087828801611989565b91505092959194509250565b60008060408385031215611b9e578182fd5b8235611ba981612938565b915060208301358015158114611ad7578182fd5b60008060408385031215611bcf578182fd5b8235611bda81612938565b946020939093013593505050565b600060208284031215611bf9578081fd5b5035919050565b600060208284031215611c11578081fd5b8135610f718161294d565b600060208284031215611c2d578081fd5b8151610f718161294d565b600060208284031215611c49578081fd5b8151610f7181612938565b600060208284031215611c65578081fd5b813567ffffffffffffffff811115611c7b578182fd5b610aab84828501611989565b600060208284031215611c98578081fd5b813567ffffffffffffffff811115611cae578182fd5b610aab84828501611a0a565b60008060408385031215611ccc578081fd5b823567ffffffffffffffff80821115611ce3578283fd5b611cef86838701611a0a565b93506020850135915080821115611d04578283fd5b50611d1185828601611989565b9150509250929050565b60008060408385031215611d2d578182fd5b50508035926020909101359150565b60008151808452611d54816020860160208601612860565b601f01601f19169290920160200192915050565b805460009060028104600180831680611d8257607f831692505b6020808410821415611da257634e487b7160e01b86526022600452602486fd5b818015611db65760018114611dc757611df4565b60ff19861689528489019650611df4565b611dd0886127f2565b60005b86811015611dec5781548b820152908501908301611dd3565b505084890196505b50505050505092915050565b607d60f81b815260010190565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b757466382c7b226e616d825270032911d1120b9ba3930b3b630b23290169607d1b60208301528451611e90816031850160208901612860565b6201016960ed1b6031918401918201528451611eb3816034840160208901612860565b7f222c226465736372697074696f6e223a224173747261676c6164652069732061603492909101918201527f6e20696e7465726163746976652c2067656e657261746976652c20334420636f60548201527f6c6c65637469626c65206578706572696d656e742e204173747261676c61646560748201527f732061726520636f6c6c6563746564207468726f756768206120756e6971756560948201527f20736f6369616c20636f6c6c656374696f6e206d656368616e69736d2e20456160b48201527f63682076657273696f6e206f66204173747261676c6164652063616e2062652060d48201527f7369676e656420776974682061207369676e617475726520776869636820776960f48201527f6c6c2072656d61696e20696e2074686520617274776f726b20666f72657665726101148201527f2e222c22637265617465645f6279223a22466162696e2052617368656564222c6101348201527f2274776974746572223a22406173747261676c616465222c00000000000000006101548201526116e961204861016c830186611d68565b611e00565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906116e990830184611d3c565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610f716020830184611d3c565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b6020808252601590820152742a37b5b2b71030b63932b0b23c9036b4b73a32b21760591b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526016908201527526b4b73a34b7339037b93232b91032bc3834b932b21760511b604082015260600190565b60208082526022908201527f4d696e74696e67206f7264657220666f7220616e6f7468657220616464726573604082015261399760f11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252601b908201527f4d617820737570706c7920616c726561647920726561636865642e0000000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526010908201526f24b731b7b93932b1ba103b30b63ab29760811b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526017908201527f5369676e65722061646472657373207265717569726564000000000000000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601e908201527f57726f6e67206d696e74696e67206f72646572207369676e61747572652e0000604082015260600190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201526f1b995c881b9bdc88185c1c1c9bdd995960821b606082015260800190565b60006020825260018060a01b038351166020830152602083015160408301526040830151606080840152610aab6080840182611d3c565b60009081526020902090565b60008219821115612811576128116128f6565b500190565b6000826128255761282561290c565b500490565b6000816000190483118215151615612844576128446128f6565b500290565b60008282101561285b5761285b6128f6565b500390565b60005b8381101561287b578181015183820152602001612863565b83811115610daf5750506000910152565b6002810460018216806128a057607f821691505b602082108114156128c157634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156128db576128db6128f6565b5060010190565b6000826128f1576128f161290c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109b357600080fd5b6001600160e01b0319811681146109b357600080fdfea26469706673582212209542df84f4abad4ca5235efc45c4fe1002d019d7605a2feec459fb8fd96bad5464736f6c63430008000033",
  "devdoc": {
    "author": "Simon Fremaux (@dievardump)",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}.  The caller must own `tokenId` or be an approved operator.",
        "params": {
          "tokenId": "the tokenId to burn"
        }
      },
      "constructor": {
        "params": {
          "contractURI_": "The contract URI (containing its metadata) - can be empty \"\"",
          "mintSigner_": "Address of the wallet used to sign minting orders",
          "name_": "name of the contract (see ERC721)",
          "openseaProxyRegistry_": "OpenSea's proxy registry to allow gas-less listings - can be address(0)",
          "owner_": "Address to whom transfer ownership (can be address(0), then owner is deployer)",
          "symbol_": "symbol of the contract (see ERC721)"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getPrice()": {
        "returns": {
          "_0": "the price to mint"
        }
      },
      "hashMintingOrder((address,uint256,string))": {
        "params": {
          "mintingOrder": "the minting order"
        },
        "returns": {
          "_0": "the hash to sign"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Override isApprovedForAll to check first if current operator is owner's OpenSea proxy"
      },
      "isOwnersOpenSeaProxy(address,address)": {
        "details": "Allows to check if `operator` is owner's OpenSea proxy",
        "params": {
          "operator": "the operator (proxy) we check for",
          "owner": "the owner we check for"
        }
      },
      "mint((address,uint256,string),bytes)": {
        "details": "mintingSignature must be a signature that matches `mintSigner` for `mintingOrder`",
        "params": {
          "mintingOrder": "the minting order",
          "mintingSignature": "signature for the mintingOrder"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_tokenId": "- the NFT asset queried for royalty information",
          "_value": "- the sale price of the NFT asset specified by _tokenId"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for value sale price"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setContractURI(string)": {
        "details": "needs to be owner",
        "params": {
          "contractURI_": "new contract URI"
        }
      },
      "setMintingSigner(address)": {
        "details": "needs to be owner",
        "params": {
          "mintSigner_": "new signer"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "Owner withdraw balance function"
      }
    },
    "title": "Astraglade",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Allows to burn a tokenId"
      },
      "constructor": {
        "notice": "constructor"
      },
      "contractURI()": {
        "notice": "Returns the contract URI function. Used on OpenSea to get details"
      },
      "getPrice()": {
        "notice": "Helper to get the price"
      },
      "hashMintingOrder((address,uint256,string))": {
        "notice": "Hash the Minting Order so it can be signed by the signer"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Allows gas-less trading on OpenSea by safelisting the Proxy of the user"
      },
      "isOwnersOpenSeaProxy(address,address)": {
        "notice": "Helper for OpenSea gas-less trading"
      },
      "mint((address,uint256,string),bytes)": {
        "notice": "Mint one token using a minting order"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "10% royalties going to this contract"
      },
      "setContractURI(string)": {
        "notice": "Helper for the owner of the contract to set the new contract URI"
      },
      "setMintingSigner(address)": {
        "notice": "Helper for the owner to change current minting signer"
      },
      "tokenURI(uint256)": {
        "notice": "tokenURI override that returns a data:json application"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2374,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "_contractURI",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2377,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "_proxyRegistry",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ProxyRegistry)2454"
      },
      {
        "astId": 1847,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1849,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "mintSigner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1859,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "tokenGeneratedString",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1863,
        "contract": "contracts/Astraglade.sol:Astraglade",
        "label": "messageToTokenId",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ProxyRegistry)2454": {
        "encoding": "inplace",
        "label": "contract ProxyRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}