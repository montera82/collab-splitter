// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ERC20Claimed extends ethereum.Event {
  get params(): ERC20Claimed__Params {
    return new ERC20Claimed__Params(this);
  }
}

export class ERC20Claimed__Params {
  _event: ERC20Claimed;

  constructor(event: ERC20Claimed) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ETHClaimed extends ethereum.Event {
  get params(): ETHClaimed__Params {
    return new ETHClaimed__Params(this);
  }
}

export class ETHClaimed__Params {
  _event: ETHClaimed;

  constructor(event: ETHClaimed) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollabSplitter__erc20DataResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CollabSplitter extends ethereum.SmartContract {
  static bind(address: Address): CollabSplitter {
    return new CollabSplitter("CollabSplitter", address);
  }

  alreadyClaimed(param0: Address): BigInt {
    let result = super.call(
      "alreadyClaimed",
      "alreadyClaimed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_alreadyClaimed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "alreadyClaimed",
      "alreadyClaimed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc20Data(param0: Address): CollabSplitter__erc20DataResult {
    let result = super.call(
      "erc20Data",
      "erc20Data(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new CollabSplitter__erc20DataResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_erc20Data(
    param0: Address
  ): ethereum.CallResult<CollabSplitter__erc20DataResult> {
    let result = super.tryCall(
      "erc20Data",
      "erc20Data(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollabSplitter__erc20DataResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getBatchClaimableERC20(
    accounts: Array<Address>,
    percents: Array<BigInt>,
    token: Address
  ): Array<BigInt> {
    let result = super.call(
      "getBatchClaimableERC20",
      "getBatchClaimableERC20(address[],uint256[],address):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(percents),
        ethereum.Value.fromAddress(token)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getBatchClaimableERC20(
    accounts: Array<Address>,
    percents: Array<BigInt>,
    token: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBatchClaimableERC20",
      "getBatchClaimableERC20(address[],uint256[],address):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(percents),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBatchClaimableETH(
    accounts: Array<Address>,
    percents: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "getBatchClaimableETH",
      "getBatchClaimableETH(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(percents)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getBatchClaimableETH(
    accounts: Array<Address>,
    percents: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBatchClaimableETH",
      "getBatchClaimableETH(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(percents)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBatchClaimed(account: Address, tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getBatchClaimed",
      "getBatchClaimed(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getBatchClaimed(
    account: Address,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBatchClaimed",
      "getBatchClaimed(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getNode(account: Address, percent: BigInt): Bytes {
    let result = super.call("getNode", "getNode(address,uint256):(bytes32)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(percent)
    ]);

    return result[0].toBytes();
  }

  try_getNode(account: Address, percent: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getNode",
      "getNode(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(percent)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  merkleRoot(): Bytes {
    let result = super.call("merkleRoot", "merkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_merkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("merkleRoot", "merkleRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  totalReceived(): BigInt {
    let result = super.call("totalReceived", "totalReceived():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalReceived(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReceived",
      "totalReceived():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimBatchCall extends ethereum.Call {
  get inputs(): ClaimBatchCall__Inputs {
    return new ClaimBatchCall__Inputs(this);
  }

  get outputs(): ClaimBatchCall__Outputs {
    return new ClaimBatchCall__Outputs(this);
  }
}

export class ClaimBatchCall__Inputs {
  _call: ClaimBatchCall;

  constructor(call: ClaimBatchCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get percent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get erc20s(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class ClaimBatchCall__Outputs {
  _call: ClaimBatchCall;

  constructor(call: ClaimBatchCall) {
    this._call = call;
  }
}

export class ClaimERC20Call extends ethereum.Call {
  get inputs(): ClaimERC20Call__Inputs {
    return new ClaimERC20Call__Inputs(this);
  }

  get outputs(): ClaimERC20Call__Outputs {
    return new ClaimERC20Call__Outputs(this);
  }
}

export class ClaimERC20Call__Inputs {
  _call: ClaimERC20Call;

  constructor(call: ClaimERC20Call) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get percent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get erc20s(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class ClaimERC20Call__Outputs {
  _call: ClaimERC20Call;

  constructor(call: ClaimERC20Call) {
    this._call = call;
  }
}

export class ClaimETHCall extends ethereum.Call {
  get inputs(): ClaimETHCall__Inputs {
    return new ClaimETHCall__Inputs(this);
  }

  get outputs(): ClaimETHCall__Outputs {
    return new ClaimETHCall__Outputs(this);
  }
}

export class ClaimETHCall__Inputs {
  _call: ClaimETHCall;

  constructor(call: ClaimETHCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get percent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class ClaimETHCall__Outputs {
  _call: ClaimETHCall;

  constructor(call: ClaimETHCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get merkleRoot_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}
